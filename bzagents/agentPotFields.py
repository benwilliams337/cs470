#!/usr/bin/python -tt

# An incredibly simple agent.  All we do is find the closest enemy tank, drive
# towards it, and shoot.  Note that if friendly fire is allowed, you will very
# often kill your own tanks with this code.

#################################################################
# NOTE TO STUDENTS
# This is a starting point for you.  You will need to greatly
# modify this code if you want to do anything useful.  But this
# should help you to know how to interact with BZRC in order to
# get the information you need.
#
# After starting the bzrflag server, this is one way to start
# this code:
# python agent0.py [hostname] [port]
#
# Often this translates to something like the following (with the
# port name being printed out by the bzrflag server):
# python agent0.py localhost 49857
#################################################################

import sys
import math
import time

from bzrc import BZRC, Command

class Agent(object):
	"""Class handles all command and control logic for a teams tanks."""

	def __init__(self, bzrc):
		self.bzrc = bzrc
		self.constants = self.bzrc.get_constants()
		self.commands = []

	def tick(self, time_diff):
		"""Some time has passed; decide what to do next."""
		mytanks, othertanks, flags, shots = self.bzrc.get_lots_o_stuff()
		self.mytanks = mytanks
		self.othertanks = othertanks
		self.flags = flags
		self.shots = shots
		self.enemies = [tank for tank in othertanks if tank.color !=
						self.constants['team']]

		self.commands = []

		potField = self.build_pot_field()
		
		for tank in mytanks:
			vector = potField[int(tank.x), int(tank.y)]
			self.alignToPotVector(tank, vector)

		results = self.bzrc.do_commands(self.commands)

	def align_to_pot_vector(self, tank, vector):
		# Turn to face the angle proscribed by the vector
		vector_angle = math.atan2(vector.y, vector.x)
		angle_diff = self.normalize_angle(vector_angle - tank.angle)
		command = Command(tank.index, 1, 2 * angle_diff, False)
		
		# Append the command
		self.commands.append(command)
	
	def normalize_angle(self, angle):
		"""Make any angle be between +/- pi."""
		angle -= 2 * math.pi * int (angle / (2 * math.pi))
		if angle <= -math.pi:
			angle += 2 * math.pi
		elif angle > math.pi:
			angle -= 2 * math.pi
		return angle
	
	def build_pot_field(self):
		FIELD_WIDTH = 500
		FIELD_HEIGHT = 500
		field = [[PotVector(0,1) for j in range(FIELD_WIDTH)] for i in range(FIELD_HEIGHT)]
		
		# TODO: Set up potential field by adding fields generated by objects in the environment
		
		return field
		
class PotVector(object):
	"""Vectors in a potential field. Values range from -1 to 1. Top-left is -1, -1, bottom-right is 1,1"""
	
	def __init__(self, x, y):
		self.x = x
		self.y = y

def main():
	# Process CLI arguments.
	try:
		execname, host, port = sys.argv
	except ValueError:
		execname = sys.argv[0]
		print >>sys.stderr, '%s: incorrect number of arguments' % execname
		print >>sys.stderr, 'usage: %s hostname port' % sys.argv[0]
		sys.exit(-1)

	# Connect.
	#bzrc = BZRC(host, int(port), debug=True)
	bzrc = BZRC(host, int(port))

	agent = Agent(bzrc)

	prev_time = time.time()

	# Run the agent
	try:
		while True:
			time_diff = time.time() - prev_time
			agent.tick(time_diff)
	except KeyboardInterrupt:
		print "Exiting due to keyboard interrupt."
		bzrc.close()


if __name__ == '__main__':
	main()

# vim: et sw=4 sts=4
